@page "/signalr-test"
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection Hub

<h3>SignalR Test</h3>
<p>State: @Hub.State</p>
@if (!string.IsNullOrEmpty(lastStatus)) { <p><em>@lastStatus</em></p> }
@if (!string.IsNullOrEmpty(lastError))  { <pre style="white-space:pre-wrap">@lastError</pre> }

<input @bind="message" placeholder="type a message" />
<button @onclick="Connect">Connect</button>
<button @onclick="Send">Send</button>

<ul>
  @foreach (var m in messages) { <li>@m</li> }
</ul>

@code {
    string message = "";
    string lastError = "";
    string lastStatus = "";
    List<string> messages = new();

    protected override void OnInitialized()
    {
        // Listen for broadcasts from the hub
        Hub.On<string>("ReceiveMessage", msg =>
        {
            messages.Add(msg);
            InvokeAsync(StateHasChanged);
        });

        Hub.Closed += e =>
        {
            lastStatus = "Closed";
            lastError = e?.ToString() ?? "";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };
        Hub.Reconnecting += e =>
        {
            lastStatus = "Reconnecting…";
            lastError = e?.ToString() ?? "";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };
        Hub.Reconnected += _ =>
        {
            lastStatus = "Reconnected";
            lastError = "";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };
    }

    async Task Connect()
    {
        try
        {
            if (Hub.State != HubConnectionState.Connected)
            {
                lastStatus = "Connecting…";
                await Hub.StartAsync();
                lastStatus = "Connected";
            }
            lastError = "";
        }
        catch (Exception ex)
        {
            lastStatus = "Connect failed";
            lastError = ex.ToString();
        }
    }

    async Task Send()
    {
        try
        {
            if (Hub.State == HubConnectionState.Connected)
            {
                await Hub.InvokeAsync("SendMessage", string.IsNullOrWhiteSpace(message) ? "hello" : message);
                lastError = "";
            }
            else
            {
                lastStatus = "Not connected";
            }
        }
        catch (Exception ex)
        {
            lastError = ex.ToString();
        }
    }
}