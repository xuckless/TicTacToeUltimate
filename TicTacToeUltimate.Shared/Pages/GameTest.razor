@page "/game-test"
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToeUltimate.Shared.Models
@inject HubConnection Hub

<div class="game-wrap">
  <h3>Game Test</h3>

  <p><em>Status:</em> @lastStatus</p>
  <p class="mono">@lastError</p>

  <div class="controls">
    <button @onclick="Connect">Connect</button>
    <button @onclick="Disconnect">Disconnect</button>
    <button @onclick="NewGame">New Game</button>
  </div>

  <div class="status">
    <p><b>Render:</b> <span>@(snapshot?.RenderString ?? "(none)")</span></p>
    <p class="congrats" style="@(snapshot?.Victory == true ? "display:block" : "display:none")">
      Congratulations!
    </p>
  </div>

  <div class="board" style="display:grid;grid-template-columns:repeat(3,1fr);grid-auto-flow:row">
      <button class="@CellClass(1,1)" title="@CellTitle(1,1)" disabled="@DisableBoard" @onclick="() => SendMove(1,1)">@CellLabel(1,1)</button>
      <button class="@CellClass(1,2)" title="@CellTitle(1,2)" disabled="@DisableBoard" @onclick="() => SendMove(1,2)">@CellLabel(1,2)</button>
      <button class="@CellClass(1,3)" title="@CellTitle(1,3)" disabled="@DisableBoard" @onclick="() => SendMove(1,3)">@CellLabel(1,3)</button>

      <button class="@CellClass(2,1)" title="@CellTitle(2,1)" disabled="@DisableBoard" @onclick="() => SendMove(2,1)">@CellLabel(2,1)</button>
      <button class="@CellClass(2,2)" title="@CellTitle(2,2)" disabled="@DisableBoard" @onclick="() => SendMove(2,2)">@CellLabel(2,2)</button>
      <button class="@CellClass(2,3)" title="@CellTitle(2,3)" disabled="@DisableBoard" @onclick="() => SendMove(2,3)">@CellLabel(2,3)</button>

      <button class="@CellClass(3,1)" title="@CellTitle(3,1)" disabled="@DisableBoard" @onclick="() => SendMove(3,1)">@CellLabel(3,1)</button>
      <button class="@CellClass(3,2)" title="@CellTitle(3,2)" disabled="@DisableBoard" @onclick="() => SendMove(3,2)">@CellLabel(3,2)</button>
      <button class="@CellClass(3,3)" title="@CellTitle(3,3)" disabled="@DisableBoard" @onclick="() => SendMove(3,3)">@CellLabel(3,3)</button>
  </div>

  @code {
      string CellLabel(int r,int c) => grid[r-1,c-1] ?? "";
      bool   IsOldest(int r,int c)  => oldest?.row == r && oldest?.col == c;
      bool   IsWin(int r,int c)     => win[r-1,c-1];
      string CellClass(int r,int c)
          => $"cell{(IsOldest(r,c) ? " oldest" : "")}{(IsWin(r,c) ? " win" : "")}";
      string CellTitle(int r,int c) => $"{r}{c}"; // “12” == row1 col2
  }

  <div class="legend">
    <span class="swatch oldest"></span> Oldest move (red)
    <span class="spacer"></span>
    <span class="swatch win"></span> Winning cells (green)
  </div>
</div>

<style>
  .game-wrap{box-sizing:border-box;max-width:520px;margin:0 auto;padding:12px 14px;width:100%;}
  .mono{white-space:pre-wrap;font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,"Liberation Mono",monospace;}
  .controls{display:flex;gap:8px;align-items:center;margin:12px 0;flex-wrap:wrap;}
  .controls button{padding:8px 12px;}
  .status{margin:10px 0;}
  .congrats{color:green;font-weight:700;display:none;}
  .board{display:grid;grid-template-columns:repeat(3,1fr);gap:10px;width:100%;}
  .cell{width:100%;aspect-ratio:1/1;font-size:clamp(18px,6vw,28px);font-weight:700;border-radius:10px;border:1px solid #ccc;background:#fff;user-select:none;}
  .cell.oldest{border-color:#c62828;color:#c62828;}
  .cell.win{background:lightgreen;}
  .legend{margin-top:16px;font-size:14px;color:#555;display:flex;align-items:center;flex-wrap:wrap;gap:10px;}
  .swatch{display:inline-block;width:18px;height:18px;border-radius:4px;margin-right:6px;}
  .swatch.oldest{background:#c62828;}
  .swatch.win{background:lightgreen;}
  .spacer{width:18px;display:inline-block;}
</style>

@code {
    string lastStatus = "Not connected";
    string lastError = "";

    const bool FLIP_RC = false;

    GameSnapshotDto? snapshot;

    // render state
    string?[,] grid = new string?[3, 3];
    bool[,] win = new bool[3, 3];
    (int row, int col)? oldest;

    protected override void OnInitialized()
    {
        Hub.On<GameSnapshotDto>("Snapshot", async s =>
        {
            await InvokeAsync(() =>
            {
                snapshot = s;          // use the newest payload
                ApplySnapshot(s);      // rebuild grid/win/oldest
                StateHasChanged();     // paint once, after all updates
            });
        });

        Hub.On<string>("Error", async e =>
        {
            await InvokeAsync(() =>
            {
                lastError = e;
                StateHasChanged();
            });
        });
    }

    async Task Connect()
    {
        try
        {
            if (Hub.State != HubConnectionState.Connected)
            {
                lastStatus = "Connecting…";
                await Hub.StartAsync();
                lastStatus = "Connected";
                lastError = "";
                // join default game on first connect (server will push Snapshot)
                await Hub.InvokeAsync("Join", "default");
            }
        }
        catch (Exception ex)
        {
            lastStatus = "Connect failed";
            lastError = ex.ToString();
        }
    }

    async Task Disconnect()
    {
        try
        {
            if (Hub.State != HubConnectionState.Disconnected)
            {
                await Hub.StopAsync();
                lastStatus = "Disconnected";
            }
        }
        catch (Exception ex)
        {
            lastError = ex.ToString();
        }
    }

    async Task NewGame()
    {
        try
        {
            await Hub.InvokeAsync("NewGame", "default");
            lastError = "";
        }
        catch (Exception ex)
        {
            lastError = ex.ToString();
        }
    }

    async Task SendMove(int row, int col)
    {
        try
        {
            var r = FLIP_RC ? col : row;
            var c = FLIP_RC ? row : col;
            await Hub.InvokeAsync("Move", r, c, "default");
            lastStatus = $"Sent move {r}{c}";
            lastError = "";
        }
        catch (Exception ex)
        {
            lastError = ex.ToString();
        }
    }

    bool DisableBoard => snapshot?.Victory == true;

    

    void ApplySnapshot(GameSnapshotDto s)
    {
        Array.Clear(grid, 0, grid.Length);
        Array.Clear(win, 0, win.Length);
        oldest = null;

        var tokens = (s.RenderString ?? "")
            .Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        for (int i = 0; i < tokens.Length; i++)
        {
            var t = tokens[i];
            if (t.Length < 3) continue;

            char p = t[0];
            if (!int.TryParse(t[1].ToString(), out var r)) continue;
            if (!int.TryParse(t[2].ToString(), out var c)) continue;
            if (r is < 1 or > 3 || c is < 1 or > 3) continue;

            grid[r-1, c-1] = (p is 'a' or 'A') ? "X"
                : (p is 'b' or 'B') ? "O"
                : p.ToString().ToUpperInvariant();

            // first token in server-provided order is the visible oldest
            if (i == 0) oldest = (r, c);
        }

        if (s.VictoryRow is { Length: > 0 })
        {
            foreach (var pair in s.VictoryRow)
                if (pair is { Length: 2 } &&
                    pair[0] is >= 1 and <= 3 && pair[1] is >= 1 and <= 3)
                    win[pair[0]-1, pair[1]-1] = true;
        }
    }
}